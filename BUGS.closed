Issue MORE-STRANGE-BACKTRACES, Issue PROBABLE-LIMIT-EXCEEDED:
###
### CAUSE: implementation functions raising an exception,
###        which was, then, handled by the condition system
### FIX:   disable the condition system around such calls
### CODE:  cl:_without_condition_system(), swank_backend:spawn(),
###        cl:probe_file(), re.match(), builtins.dict.get()
###
python neutrality: initialised for version 3
importing [CL:T, CL:NIL, CL:QUOTE] into #<PACKAGE "SWANK_IO_PACKAGE">

;; Swank started at port: 4005.
Caught: (2, 'No such file or directory', '/home/deepfire/.slime-secret')
 0: cl.py:1517: __cl_condition_handler__(cond, frame)
 1: cl.py:1445: pytracer(frame, event, arg)
 2: /usr/lib64/python3.2/genericpath.py: 18: exists(path)
 3: partus.py:166: slime_secret()
 4: partus.py:156: authenticate_client(stream)
 5: partus.py:152: accept_connections(socket, style, dont_close, coding_system)
 6: partus.py:108: serve()
 7: partus.py:116: <lambda>()
 8: swank_python.py:221: <lambda>()
 9: /usr/lib64/python3.2/threading.py:736: _bootstrap_inner(self)
Caught: '_thread.lock' object has no attribute '_release_save'
 0: cl.py:1517: __cl_condition_handler__(cond, frame)
 1: cl.py:1445: pytracer(frame, event, arg)
 2: /usr/lib64/python3.2/threading.py:189: __init__(self, lock, verbose)
 3: /usr/lib64/python3.2/threading.py:173: Condition()
 4: /usr/lib64/python3.2/threading.py:390: __init__(self, verbose)
 5: /usr/lib64/python3.2/threading.py:382: Event()
 6: /usr/lib64/python3.2/threading.py:636: __init__(self, group, target, name, args, kwargs, verbose)
 7: swank_python.py:220: spawn(fn, name)
 8: swank.py:705: spawn_threads_for_connection(connection)
 9: partus.py:171: serve_requests(connection)
10: partus.py:153: accept_connections(socket, style, dont_close, coding_system)
11: partus.py:108: serve()
12: partus.py:116: <lambda>()
13: swank_python.py:221: <lambda>()
14: /usr/lib64/python3.2/threading.py:736: _bootstrap_inner(self)
Caught: '_thread.lock' object has no attribute '_release_save'
 0: cl.py:1517: __cl_condition_handler__(cond, frame)
 1: cl.py:1445: pytracer(frame, event, arg)
 2: /usr/lib64/python3.2/threading.py:189: __init__(self, lock, verbose)
 3: /usr/lib64/python3.2/threading.py:173: Condition()
 4: /usr/lib64/python3.2/threading.py:390: __init__(self, verbose)
 5: /usr/lib64/python3.2/threading.py:382: Event()
 6: /usr/lib64/python3.2/threading.py:636: __init__(self, group, target, name, args, kwargs, verbose)
 7: swank_python.py:220: spawn(fn, name)
 8: swank.py:711: control_thread(connection)
 9: swank.py:704: <lambda>()
10: swank_python.py:221: <lambda>()
11: /usr/lib64/python3.2/threading.py:736: _bootstrap_inner(self)
--> 000060, '(:emacs-rex (swank:connection-info) "COMMON-LISP-USER" t 1)
'
Caught: ((<class 'str'>, '^[0-9]+$', 0),)
 0: cl.py:1517: __cl_condition_handler__(cond, frame)
 1: cl.py:1445: pytracer(frame, event, arg)
 2: /usr/lib64/python3.2/functools.py:176: wrapper()
 3: /usr/lib64/python3.2/re.py:256: _compile(pattern, flags)
 4: /usr/lib64/python3.2/re.py:153: match(pattern, string, flags)
 5: cl.py:1313: read_number_or_symbol()
 6: cl.py:1261: read()
 7: cl.py:1281: read_list()
 8: cl.py:1256: read()
 9: cl.py:1342: read_from_string(string, eof_error_p, eof_value, start, end, preserve_whitespace)
10: cl.py:728: <lambda>()
11: cl.py:706: catch(ball, body)
12: cl.py:728: <lambda>()
13: swank_rpc.py: 53: body()
14: cl.py:1143: with_standard_io_syntax(body)
15: swank_rpc.py: 54: read_form(string, package)
16: swank_rpc.py: 18: <lambda>()
17: cl.py:1549: handler_bind(fn, no_error)
18: cl.py:1571: <lambda>()
19: cl.py:706: catch(ball, body)
20: cl.py:1571: handler_case(body, no_error)
21: swank_rpc.py: 19: read_message(stream, package)
22: swank.py:402: <lambda>()
23: cl.py:1549: handler_bind(fn, no_error)
24: cl.py:1571: <lambda>()
25: cl.py:706: catch(ball, body)
26: cl.py:1571: handler_case(body, no_error)
27: swank.py:404: <lambda>()
28: cl.py:1549: handler_bind(fn, no_error)
29: swank.py:405: <lambda>()
30: swank.py:352: without_slime_interrupts(body)
31: swank.py:397: decode_message(stream)
32: swank.py:471: <lambda>()
33: cl.py:333: loop(body)
34: swank.py:471: <lambda>()
35: cl.py:1549: handler_bind(fn, no_error)
36: swank.py:211: handler_case_body()
37: cl.py:1549: handler_bind(fn, no_error)
38: cl.py:1571: <lambda>()
39: cl.py:706: catch(ball, body)
40: cl.py:1571: handler_case(body, no_error)
41: swank.py:215: with_swank_error_handler(connection, body)
42: swank.py:470: read_loop(connection)
43: swank.py:710: <lambda>()
44: swank_python.py:221: <lambda>()
45: /usr/lib64/python3.2/threading.py:736: _bootstrap_inner(self)
Exception in thread reader-thread:
Traceback (most recent call last):
  File "/usr/lib64/python3.2/threading.py", line 736, in _bootstrap_inner
    self.run()
  File "swank_python.py", line 221, in <lambda>
    thread.run = lambda: cl.enable_pytracer() and fn()
  File "swank.py", line 710, in <lambda>
    connection.reader_thread  = spawn(lambda: read_loop(connection),
  File "swank.py", line 470, in read_loop
    lambda:
  File "swank.py", line 215, in with_swank_error_handler
    swank_error = (lambda condition:
  File "cl.py", line 1571, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 1571, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 211, in handler_case_body
    swank_error = (lambda condition:
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 471, in <lambda>
    loop(lambda: send(control_thread, decode_message(input_stream))))
  File "cl.py", line 333, in loop
    body()
  File "swank.py", line 471, in <lambda>
    loop(lambda: send(control_thread, decode_message(input_stream))))
  File "swank.py", line 397, in decode_message
    lambda:
  File "swank.py", line 352, in without_slime_interrupts
    return body()
  File "swank.py", line 405, in <lambda>
    Exception = lambda c: error(make_swank_error(c))))
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 404, in <lambda>
    lambda c: [keyword("reader-error"), c.packet, c.cause]),
  File "cl.py", line 1571, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 1571, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 402, in <lambda>
    symbol_value("_swank_io_package_")),
  File "swank_rpc.py", line 19, in read_message
    Exception = (lambda c: # XXX: originally, caught only READER-ERROR
  File "cl.py", line 1571, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 1571, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank_rpc.py", line 18, in <lambda>
    lambda: read_form(packet, package),
  File "swank_rpc.py", line 54, in read_form
    return with_standard_io_syntax(body)
  File "cl.py", line 1143, in with_standard_io_syntax
    return body()
  File "swank_rpc.py", line 53, in body
    return read_from_string(string)
  File "cl.py", line 728, in <lambda>
    lambda: fn(*args, **keys)))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 728, in <lambda>
    lambda: fn(*args, **keys)))
  File "cl.py", line 1342, in read_from_string
    return read()
  File "cl.py", line 1256, in read
    if   char == "(":  obj = read_list()
  File "cl.py", line 1281, in read_list
    obj = read()
  File "cl.py", line 1261, in read
    obj = read_number_or_symbol()
  File "cl.py", line 1313, in read_number_or_symbol
    if re.match("^[0-9]+$", token):
  File "/usr/lib64/python3.2/re.py", line 153, in match
    return _compile(pattern, flags).match(string)
  File "/usr/lib64/python3.2/re.py", line 256, in _compile
    return _compile_typed(type(pattern), pattern, flags)
  File "/usr/lib64/python3.2/functools.py", line 176, in wrapper
    result = cache[key]
  File "cl.py", line 1445, in pytracer
    method(arg, frame)
  File "cl.py", line 1525, in __cl_condition_handler__
    debugger_hook(cond, debugger_hook)
  File "swank.py", line 1487, in swank_debugger_hook
    invoke_default_debugger_condition = lambda _: invoke_slime_debugger(condition))
  File "cl.py", line 1571, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 1571, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 1486, in <lambda>
    lambda: invoke_slime_debugger(condition)),
  File "swank_backend.py", line 204, in call_with_debugger_hook
    return body()
  File "swank.py", line 1486, in <lambda>
    lambda: invoke_slime_debugger(condition)),
  File "swank.py", line 1475, in invoke_slime_debugger
    lambda: (debug_in_emacs(condition) if symbol_value("_emacs_connection_") else
  File "swank.py", line 352, in without_slime_interrupts
    return body()
  File "swank.py", line 1477, in <lambda>
    lambda connection:
  File "cl.py", line 256, in _when_let
    return consequent(x) if x else None
  File "swank.py", line 1479, in <lambda>
    lambda: debug_in_emacs(condition)))))
  File "swank.py", line 366, in with_connection
    lambda: with_swank_error_handler(
  File "swank.py", line 352, in without_slime_interrupts
    return body()
  File "swank.py", line 368, in <lambda>
    lambda: with_io_redirection(
  File "swank.py", line 215, in with_swank_error_handler
    swank_error = (lambda condition:
  File "cl.py", line 1571, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 1571, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 211, in handler_case_body
    swank_error = (lambda condition:
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank.py", line 370, in <lambda>
    lambda:
  File "swank.py", line 357, in with_io_redirection
    return with_bindings(connection.env, body)
  File "swank.py", line 97, in call_with_bindings
    return fun()
  File "swank.py", line 373, in <lambda>
    body))))
  File "swank_backend.py", line 204, in call_with_debugger_hook
    return body()
  File "swank.py", line 1479, in <lambda>
    lambda: debug_in_emacs(condition)))))
  File "swank.py", line 1539, in debug_in_emacs
    call_with_debugging_environment(lambda: sldb_loop(env._sldb_level_))
  File "swank_python.py", line 145, in call_with_debugging_environment
    debug_condition = lambda condition: signal((make_condition(sldb_condition,
  File "cl.py", line 1549, in handler_bind
    return no_error(fn())
  File "swank_python.py", line 144, in <lambda>
    handler_bind(lambda: debugger_loop_fn(),
  File "swank.py", line 1539, in <lambda>
    call_with_debugging_environment(lambda: sldb_loop(env._sldb_level_))
  File "cl.py", line 728, in <lambda>
    lambda: fn(*args, **keys)))
  File "cl.py", line 706, in catch
    return body()
  File "cl.py", line 728, in <lambda>
    lambda: fn(*args, **keys)))
  File "swank.py", line 1543, in sldb_loop
    assert(symbol_value("_slime_connection_"))
  File "cl.py", line 1045, in symbol_value
    return _symbol_value(_coerce_to_symbol_name(symbol))
  File "cl.py", line 1032, in _symbol_value
    error(AttributeError, "Unbound variable: %s." % name)
  File "cl.py", line 1497, in error
    raise make_condition(datum, *args, **keys)
AttributeError: Unbound variable: _SLIME_CONNECTION_.

Issue STR-EXCEPTIONS-MYSTERY:

First, let's establish a firm fact:

>>> raise "fooage"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: exceptions must derive from BaseException

So, can't raise a string.  However:

In thread 'control-thread': condition of type <class 'str'>: can only concatenate list (not "tuple") to list
 0: cl.py:1698: _report_condition(condition, stream)
 1: <string>:1: <lambda>(c, h)
 2: cl.py:1722: __cl_condition_handler__(condspec, frame)
 3: cl.py:1619: _pytracer(frame, event, arg)
 4: swank.py:578: return_(thread)
 5: swank.py:329: destructure_case(x)
 6: swank.py:625: dispatch_event(event)
 7: swank.py:478: <lambda>()
 8: cl.py:355: loop(body)
 9: swank.py:478: <lambda>()
10: cl.py:1752: handler_bind(fn, no_error)
11: swank.py:224: with_panic_handler(conn, body)
12: swank.py:477: dispatch_loop(conn)
13: swank.py:720: control_thread(conn)
14: swank.py:712: <lambda>()
15: swank_python.py:258: <lambda>()
16: /usr/lib64/python3.2/threading.py:736: _bootstrap_inner(self)

..and it keeps happening.

Issue OPEN-DEDICATED-OUTPUT-STREAM-RACE

The swank part does not make it to set up the port listener in due time: slime reacts faster.
