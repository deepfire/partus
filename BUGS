Issue MUST-BIND-PARTUS-TO-PYTHON-BUFFERS-ONLY:
      <- 00013a (:emacs-rex (swank:autodoc (quote ("defun" "save-presented-object" ("object") "\"Save OBJECT and return the assigned id.
If OBJECT was saved previously return the old id.\"" ("let" (("object" ("if" ("null" "object") "*nil-surrogate*" "object"))) "" swank::%cursor-marker%))) :print-right-margin 190) ":swank" t 6)

Issue PROBABLE-LIMIT-EXCEEDED:
      See comments at cl.py:read_from_string().

      Full stack trace (don't be confused by the botched "EOF during read"
      exception, it's the resignalling handler being confused by re's index error):

python3 -c "import partus; partus.create_server()"
python neutrality: initialised for version 3
importing [CL:t, CL:nil, CL:quote] into #<PACKAGE "SWANK_IO_PACKAGE">
Exception in thread reader-thread:
Traceback (most recent call last):
  File "/usr/lib/python3.2/functools.py", line 176, in wrapper
    result = cache[key]
KeyError: (<class 'str'>, '^[0-9]+$', 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.2/threading.py", line 740, in _bootstrap_inner
    self.run()
  File "swank_python.py", line 217, in <lambda>
    thread.run = lambda: cl.enable_pytracer() and fn()
  File "swank.py", line 635, in <lambda>
    connection.reader_thread  = spawn(lambda: read_loop(connection),
  File "swank.py", line 398, in read_loop
    lambda:
  File "swank.py", line 154, in with_swank_error_handler
    swank_error = (lambda condition:
  File "cl.py", line 1385, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1049, in catch
    return body()
  File "cl.py", line 1385, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1363, in handler_bind
    return no_error(fn())
  File "swank.py", line 150, in handler_case_body
    swank_error = (lambda condition:
  File "cl.py", line 1363, in handler_bind
    return no_error(fn())
  File "swank.py", line 399, in <lambda>
    loop(lambda: send(control_thread, decode_message(input_stream))))
  File "cl.py", line 308, in loop
    body()
  File "swank.py", line 399, in <lambda>
    loop(lambda: send(control_thread, decode_message(input_stream))))
  File "swank.py", line 325, in decode_message
    lambda:
  File "swank.py", line 284, in without_slime_interrupts
    return body()
  File "swank.py", line 333, in <lambda>
    Exception = lambda c: error(make_swank_error(c))))
  File "cl.py", line 1363, in handler_bind
    return no_error(fn())
  File "swank.py", line 332, in <lambda>
    lambda c: [keyword("reader-error"), c.packet, c.cause]),
  File "cl.py", line 1385, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1049, in catch
    return body()
  File "cl.py", line 1385, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1363, in handler_bind
    return no_error(fn())
  File "swank.py", line 330, in <lambda>
    symbol_value("_swank_io_package_")),
  File "swank_rpc.py", line 17, in read_message
    Exception = (lambda c: # XXX: originally, caught only READER-ERROR
  File "cl.py", line 1385, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1049, in catch
    return body()
  File "cl.py", line 1385, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1363, in handler_bind
    return no_error(fn())
  File "swank_rpc.py", line 16, in <lambda>
    lambda: read_form(packet, package),
  File "swank_rpc.py", line 50, in read_form
    return with_standard_io_syntax(body)
  File "cl.py", line 966, in with_standard_io_syntax
    return body()
  File "swank_rpc.py", line 49, in body
    return read_from_string(string)
  File "cl.py", line 1071, in <lambda>
    lambda: fn(*args, **kwargs)))
  File "cl.py", line 1049, in catch
    return body()
  File "cl.py", line 1071, in <lambda>
    lambda: fn(*args, **kwargs)))
  File "cl.py", line 1212, in read_from_string
    IndexError = lambda c: handle_short_read_if(True))
  File "cl.py", line 1385, in handler_case
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1049, in catch
    return body()
  File "cl.py", line 1385, in <lambda>
    lambda: handler_bind(body, no_error = no_error, **wrapped_handlers))
  File "cl.py", line 1363, in handler_bind
    return no_error(fn())
  File "cl.py", line 1123, in read
    if   char == "(":  obj = read_list()
  File "cl.py", line 1148, in read_list
    obj = read()
  File "cl.py", line 1128, in read
    obj = read_number_or_symbol()
  File "cl.py", line 1180, in read_number_or_symbol
    if re.match("^[0-9]+$", token):
  File "/usr/lib/python3.2/re.py", line 153, in match
    return _compile(pattern, flags).match(string)
  File "/usr/lib/python3.2/re.py", line 255, in _compile
    return _compile_typed(type(pattern), pattern, flags)
  File "/usr/lib/python3.2/functools.py", line 180, in wrapper
    result = user_function(*args, **kwds)
  File "/usr/lib/python3.2/re.py", line 267, in _compile_typed
    return sre_compile.compile(pattern, flags)
  File "/usr/lib/python3.2/sre_compile.py", line 495, in compile
    code = _code(p, flags)
  File "/usr/lib/python3.2/sre_compile.py", line 480, in _code
    _compile(code, p.data, flags)
  File "/usr/lib/python3.2/sre_compile.py", line 82, in _compile
    _compile(code, av[2], flags)
  File "/usr/lib/python3.2/sre_compile.py", line 40, in _compile
    for op, av in pattern:
  File "/usr/lib/python3.2/sre_parse.py", line 134, in __getitem__
    return self.data[index]
  File "cl.py", line 1273, in pytracer
    method(arg, frame)
  File "cl.py", line 1339, in __cl_condition_handler__
    signal(cond)
  File "cl.py", line 1320, in signal
    cluster[name](condition)
  File "cl.py", line 1382, in <lambda>
    wrapped_handlers = { cond_name: (lambda cond: return_from(nonce, handler(cond)))
  File "cl.py", line 1212, in <lambda>
    IndexError = lambda c: handle_short_read_if(True))
  File "cl.py", line 1117, in handle_short_read_if
    (error("EOF during read") if eof_error_p else
  File "cl.py", line 1325, in error
    raise make_condition(datum, *args, **keys)
Exception: EOF during read

